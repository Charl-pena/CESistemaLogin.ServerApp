@using Microsoft.AspNetCore.Components.Authorization

@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation

@if (yaSeEjecuto)
{
<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(App).Assembly">
        <Found Context="routeData">
            @* //TODO Chnage MainLayout to UserLayout *@
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
				<NotAuthorized>
                    <RedirectToLogin />
				</NotAuthorized>
			</AuthorizeRouteView>

            <FocusOnNavigate RouteData="@routeData" Selector="h1" />
        </Found>
        <NotFound>
            <PageTitle>Not found</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <p role="alert">Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>
}


@code {
   bool yaSeEjecuto = false;
   protected override async Task OnInitializedAsync()
   {
      var uri = new Uri(Navigation.Uri);
      var queryParams = System.Web.HttpUtility.ParseQueryString(uri.Query);
      var token = queryParams["token"];
      if (token != null)
      {
        // Hay que checar antes de borrar, suelte un error intentar eliminar un elemento que no existe
        if ( await LocalStorage.ContainKeyAsync("o8yo82q43rtbuiibeWQAFY8GFWEIGUO7G8FLKBJ"))
        {
           await LocalStorage.RemoveItemAsync("o8yo82q43rtbuiibeWQAFY8GFWEIGUO7G8FLKBJ");
        }
        await LocalStorage.SetItemAsync("o8yo82q43rtbuiibeWQAFY8GFWEIGUO7G8FLKBJ", token);
        yaSeEjecuto = true;
      }
   }
}