@using Blazored.LocalStorage;
@using System.Security.Claims

@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthStateProvider
@inject CEBlazorBulma.Services.ISVGService SvgService
@inject NavigationManager Navigation

<AuthorizeView>
	<Authorized>
		@* Render the content if the user is logged in *@
		<button class="bd-nav-item is-github  p-0" @onclick="() => activeUserChange()" 
		 >
			<span class="bd-nav-item-name is-hidden-touch">
      	   <span class="is-hidden is-block-widescreen is-size-6">
					Hola @context.User.FindFirst("given_name")?.Value
				</span>
      	</span>
			<figure class="image is-32x32">
				@((MarkupString)svgProfileNoImage)
			</figure>
		</button>
		<div class="bd-user @activeUser">
			<div class="field is-flex">
				<button class="ml-auto" @onclick="LogoutAsync">Cerrar sesi√≥n</button>
			</div>
			<div class="is-flex is-justify-content-space-around">
				<div class="">
					<figure class="image is-96x96">
						@((MarkupString)svgProfileNoImage)
					</figure>
				</div>
				<div class="is-flex is-flex-direction-column is-justify-content-center">
					<span class="title is-5 mb-0">
						@context.User.FindFirst("given_name")?.Value
					</span>
					<span>
						@context.User.FindFirst("unique_name")?.Value
					</span>
					<a class="" href="#">
							Mi cuenta
					</a>
				</div>
			</div>
		</div>
	</Authorized>
	<NotAuthorized>
		@* Render the content if the user is not logged in *@
		<a class="bd-nav-item is-github  p-1" href="/authentication/login">
			<span class="bd-nav-item-name is-hidden-touch">
      	   <span class="is-hidden is-block-widescreen">Login</span>
      	</span>
			<figure class="image is-32x32">
				@((MarkupString)svgLogin)
			</figure>
		</a>
	</NotAuthorized>
</AuthorizeView>

@code 
{
	private string activeUser = "";
	private string svgLogin = "";
	private string svgProfileNoImage = "";
	void activeUserChange() => activeUser = (string.IsNullOrEmpty(activeUser)) ? "is-active" : "";
	private async Task LogoutAsync()
	{
		if(!(await LocalStorage.ContainKeyAsync("o8yo82q43rtbuiibeWQAFY8GFWEIGUO7G8FLKBJ"))){
			await LocalStorage.RemoveItemAsync("o8yo82q43rtbuiibeWQAFY8GFWEIGUO7G8FLKBJ");
		}
		await AuthStateProvider.GetAuthenticationStateAsync();
	}
	protected override async Task OnInitializedAsync()
   {
		//var uri = new Uri(Navigation.Uri);
      //var queryParams = System.Web.HttpUtility.ParseQueryString(uri.Query);
		//var token = queryParams["token"];
		//if(token != null)
		//{
		//	// Hay que checar antes de borrar, suelte un error intentar eliminar un elemento que no existe
		//	if(!(await LocalStorage.ContainKeyAsync("o8yo82q43rtbuiibeWQAFY8GFWEIGUO7G8FLKBJ"))){
		//		await LocalStorage.RemoveItemAsync("o8yo82q43rtbuiibeWQAFY8GFWEIGUO7G8FLKBJ");
		//	}
		//	await LocalStorage.SetItemAsync("o8yo82q43rtbuiibeWQAFY8GFWEIGUO7G8FLKBJ", token);
		//	await AuthStateProvider.GetAuthenticationStateAsync();
		//}
      svgLogin = await SvgService.GetSvgContent("/images/login.svg");
      svgProfileNoImage = await SvgService.GetSvgContent("/images/user.svg");
   }
}