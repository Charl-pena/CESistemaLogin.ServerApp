@inject ILogger<PdfLoader> Logger
@inherits PDFBaseLogic

@if (loadedFile == null)
{
   <h1>Sube los Pdfs que deseas analizar</h1>
   <p>
      Maximo tamaño de archivo:
      <br />
      2MB
   </p>
   <p>
   Maximo de Archivos:
   <br />
   @maxAllowedFiles
</p>
   <p>
   Upload up to @maxAllowedFiles of up to @maxFileSize bytes:
</p>

   <div class="file is-normal mt-2">
      <label class="file-label">
         <InputFile class="file-input" OnChange="LoadFiles" />
         <span class="file-cta">
            <span class="file-label"> Choose a file… </span>
         </span>
      </label>
   </div>
}

@if (isLoading)
{
   <p>Uploading...</p>
}
else
{

   @if (loadedFile != null)
   {
      <MostrarGraficas/>
   }
   else
   {
      @errorMessage
   }
}

@code {   
   #pragma warning disable BL0007
   [Parameter]
   public bool FileIsSave
   {
      get => fileIsSave;
      set
      {
         if (fileIsSave == value) return;
         fileIsSave = value;
         FileIsSaveChanged.InvokeAsync(value);
      }
   }
   [Parameter]
   public EventCallback<bool> FileIsSaveChanged { get; set; }
   #pragma warning restore BL0007

   private string? errorMessage;
   //Guardar los Bytes Del Archivo en esta variable
   private byte[]? loadedFile;
   private bool fileIsSave;
   private bool isLoading;

   private async Task LoadFiles(InputFileChangeEventArgs e)
   {
      isLoading = true;
      var file = e.File;

      if (file != null)
      {
         // Validar el tipo de archivo
         if (!IsValidFile(file, out string validationError))
         {
            errorMessage = validationError;
            isLoading = false;
            return;
         }

         errorMessage = null; // Resetear el mensaje de error si no hay errores

         // Abrir un stream para guardar los bytes dentro de la variable
         using (var stream = new MemoryStream())
         {
            try
            {
               //Guardar el contenido
               await file.OpenReadStream(maxFileSize).CopyToAsync(stream);
               loadedFile = stream.ToArray();
               FileIsSave = true;
            }
            catch (Exception ex)
            {
               errorMessage = $"Error al Abrir el archivo PDF: {ex.Message}";
               Logger.LogError(ex, "Error al Abrir el archivo PDF.");
            }
         }

         isLoading = false;
      }
   }
}