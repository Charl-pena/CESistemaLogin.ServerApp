@using Blazored.LocalStorage
@using System.Security.Claims

@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthStateProvider
@inject AuthenticationService AuthService

<PageContent>
   <div class="section pt-6 px-2 is-large is-flex is-flex-direction-column">
      <div class="block">
         <h1 class="title is-size-4-touch">Habilita la autenticación en 2-Pasos</h1>
         <h2 class="subtitle">Es necesario para utilizar la aplicación</h2>   
      </div>
      @if (!string.IsNullOrEmpty(_qrImagenBase64))
      {
      <hr>
      <div class="my-4 is-flex is-flex-wrap-wrap is-justify-content-space-around is-align-items-center">
         @* Listo- Encuadrar el Qr en una dimension adecuada *@
            <figure class="image is-img-responsive is-border-radius">
               <img src="data:image/jpeg;base64,@_qrImagenBase64" alt="QR"/>
            </figure>

            <div class="mt-4 is-hidden-desktop" style="width: 100%;"></div>
            @* has-text-centered-touch *@
            <div style="flex-basis: 72%;">
               <p class="is-family-monospace label mb-1 has-text-centered-touch">
                  ESCANEA EL CODIGO QR
               </p>
               <p class="has-text-justified-touch mb-1">
                  Abre la aplicación de autenticación y escanea la imagen de la izquierda,
                  usando la cámara de tu teléfono.
               </p>

               <p class="is-family-monospace label mb-1 has-text-centered-touch">
                  2FA KEY (Entrada Manual)
               </p>
               <p class="is-wordbreaked">
                  @_secret
               </p>
            </div>
      </div>
      }
      <hr>
      <div class="my-4 is-flex is-flex-wrap-wrap is-justify-content-space-around is-align-items-center">
         <figure class="image is-img-responsive is-border-radius">
            <img src="/images/2fa-ce-t.webp" alt="QR"/>
         </figure>
         <div class="mt-4 is-hidden-desktop" style="width: 100%;"></div>
         <div style="flex-basis: 72%;">
            <p class="is-family-monospace label mb-1 has-text-centered-touch">
               INGRESA CON TU CÓDIGO
            </p>
            <p class="has-text-justified-touch mb-3">
               Ingresa la clave de 6 digitos generada por el autenticador
            </p>
            @* Aquí tiene que ir el Input  *@
            <div class="field has-addons">
               <div class="control">
                  <input class="input" type="text" placeholder="000 000" maxlength="6" @bind=_inputKey>
               </div>
               <div class="control">
                  @* Aqui debe de ir un onclick en el button  *@
                  <button class="button" @onclick="() => SendKey(_inputKey)">
                     Activar
                  </button>
               </div>
               </div>
         </div>
      </div>
   </div>
</PageContent>

@code
{  
   private string? _qrImagenBase64;
   private string? _inputKey;
   private string? _email;
   private string? _secret;

   private async Task SendKey(string inputKey)
   {
      //Aquí debemos interactuar con el controlador que envie la key a la api
      if(_email != null && inputKey != null && _qrImagenBase64 != null)
      {
         var resultado =await AuthService.SetMfaAsync(requestModel: new(){UserEmail = _email, Password = inputKey});
         Console.WriteLine(resultado);
      }
      if(_email != null && inputKey != null && _qrImagenBase64 == null)
      {
         var resultado =await AuthService.CheckMfaKeyAsync(requestModel: new(){UserEmail = _email, Password = inputKey});
         //Aquí deberiamos de recibir un nuevo token el cual deberiamos de guardar sustituyendo el viejo
         if(resultado?.AccessToken !=null)
         {
            //En este caso no es necesario checar si existe antes de establecerlo
            await LocalStorage.SetItemAsync("o8yo82q43rtbuiibeWQAFY8GFWEIGUO7G8FLKBJ", resultado.AccessToken);
		      //¿Se puede mejorar este codigo evitando llamar directamente a GetAuthenticationState?
		      await AuthStateProvider.GetAuthenticationStateAsync();
         }
      }
   }
   protected override async Task OnInitializedAsync()
   {
      //Necesito revisar el status del MFA del usuario
         //Si es valido guardo el nuevo token del usuario en el localstorage (debe de cambiar su rol o claim)
         
      _email = ((JwtAuthenticationStateProvider)AuthStateProvider).CurrentUser.unique_name;
      if(!String.IsNullOrEmpty(_email))
      {
         var response = await AuthService.MfaStatusAsync(requestModel: new(){UserEmail = _email} );
         if(response == null)
         {
            //Aqui hubo un error
            Console.WriteLine("Aqui hubo un error");
         }else if(String.IsNullOrEmpty(response.AccessToken))
         {
            //Aqui ya tiene activado el MFA
            Console.WriteLine("Aqui ya tiene activado el MFA");
            Console.WriteLine(_email);
         }else
         {
            //Aquí NO tiene configurado el MFA
            Console.WriteLine("Aquí NO tiene configurado el MFA");
            //Aquí response deberia contener el qr (En formato Base64)
            _qrImagenBase64 = response.QrString;
            _secret = response.AccessToken;
         }
      }
   }
}