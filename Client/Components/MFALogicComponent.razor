@using Blazored.LocalStorage
@using System.Security.Claims

@inject AuthenticationStateProvider AuthStateProvider
@inject ServerCallsService ServerCallService

@if (_deslogear)
{
   <CuentaRegresiva />
}
<PageTitle>Mfa Challenge</PageTitle>

<PageContent>
   <div class="section pt-6 px-2 is-large is-flex is-flex-direction-column">
      <div class="block">
         <h1 class="title is-size-4-touch">Habilita la autenticación en 2-Pasos</h1>
         <h2 class="subtitle">Es necesario para utilizar la aplicación</h2>
      </div>

      @if (!string.IsNullOrEmpty(_qrImagenBase64))
      {
         <hr>
         <div class="my-4 is-flex is-flex-wrap-wrap is-justify-content-space-around is-align-items-center">
            <figure class="image is-img-responsive is-border-radius">
               <img src="data:image/jpeg;base64,@_qrImagenBase64" alt="QR" />
            </figure>

            <div class="mt-4 is-hidden-desktop" style="width: 100%;"></div>

            <div style="flex-basis: 72%;">
               <p class="is-family-monospace label mb-1 has-text-centered-touch">
                  ESCANEA EL CODIGO QR
               </p>
               <p class="has-text-justified-touch mb-1">
                  Abre la aplicación de autenticación y escanea la imagen de la izquierda,
                  usando la cámara de tu teléfono.
               </p>

               <p class="is-family-monospace label mb-1 has-text-centered-touch">
                  2FA KEY (Entrada Manual)
               </p>
               <p class="is-wordbreaked">
                  @_secret
               </p>
            </div>
         </div>
      }
      <hr>
      @if (_mostrarMensajeError)
      {
         <p class="help is-danger is-size-5 is-align-self-center m-0">Código Ingresado Invalido</p>
      }
      <div class="my-4 is-flex is-flex-wrap-wrap is-justify-content-space-around is-align-items-center">
         <figure class="image is-img-responsive is-border-radius">
            <img src="/images/2fa-ce-t.webp" alt="QR" />
         </figure>
         <div class="mt-4 is-hidden-desktop" style="width: 100%;"></div>
         <div style="flex-basis: 72%;">
            <p class="is-family-monospace label mb-1 has-text-centered-touch">
               INGRESA CON TU CÓDIGO
            </p>
            <p class="has-text-justified-touch mb-3">
               Ingresa la clave de 6 digitos generada por el autenticador
            </p>

            <div class="field has-addons">
               <div class="control">
                  <input class=@($"input {(_mostrarMensajeError ? errorClass : String.Empty)}") type="text"
                     placeholder="000 000" maxlength="6" value="@_inputKey"
                     @oninput="@(e => _inputKey = e.Value?.ToString())" @onkeydown="HandleKeyPress">
               </div>
               <div class="control">
                  <button class=@($"button {(_mostrarMensajeError ? errorClass : String.Empty)}")
                  @onclick="() => SendKey(_inputKey)">
                     Activar
                  </button>
               </div>
            </div>
         </div>
      </div>
   </div>
</PageContent>

@code
{
   private string? _qrImagenBase64;
   private string? _inputKey;
   private string? _secret;
   private string? _email;
   private string errorClass = "is-danger";
   private bool _mostrarMensajeError = false;
   private bool _deslogear = false;

   private async Task HandleKeyPress(KeyboardEventArgs e)
   {
      if (e.Key == "Enter")
      {
         await SendKey(_inputKey);
      }
   }

   private async Task SendKey(string? inputKey)
   {
      //Aquí debemos interactuar con el controlador que envie la key a la api
      if (!string.IsNullOrEmpty(_email) && !string.IsNullOrEmpty(inputKey) && !string.IsNullOrEmpty(_qrImagenBase64))
      {
         var resultado = await ServerCallService.SetMfaAsync(requestModel: new() { UserEmail = _email, Password = inputKey });
         if (resultado == null)
         {
            //Aqui hubo un error o 401 y hay que regresarlo a login
            _deslogear = true;
         }else
         {
            _mostrarMensajeError= (bool)!resultado; 
         }
      }
      if (!string.IsNullOrEmpty(_email) && !string.IsNullOrEmpty(inputKey) && _qrImagenBase64 == null)
      {
         var resultado = await ServerCallService.CheckMfaKeyAsync(requestModel: new() { UserEmail = _email, Password = inputKey });

         if (resultado == null)
         {
            //Aqui hubo un error o 401 y hay que regresarlo a login
            _deslogear = true;

         }
         else if (resultado.AccessToken == string.Empty)
         {
            //Aqui la key que proporciono no es valida
            _mostrarMensajeError = true;
         }
         else if (!String.IsNullOrEmpty(resultado.AccessToken))
         {
            _mostrarMensajeError = false;
            //Aquí deberiamos de recibir un nuevo token el cual deberiamos de guardar sustituyendo el viejo
            var parts = resultado.AccessToken.Split('.');
            if (parts.Length != 3)
            {
               return;
            }
            parts[2] = "rXTp6bA5YfjK2ybF1imgPruMHyMxKauxqg6USG1E9vm";

            resultado.AccessToken = String.Join('.', parts);

            await ((JwtAuthenticationStateProvider)AuthStateProvider).SetCurrentUserAsync(resultado.AccessToken, true);
         }
      }
   }
   protected override async Task OnInitializedAsync()
   {
      //Necesito revisar el status del MFA del usuario
      _email = ((JwtAuthenticationStateProvider)AuthStateProvider).CurrentUser.Unique_name;
      if (!String.IsNullOrEmpty(_email))
      {
         var response = await ServerCallService.MfaStatusAsync(requestModel: new() { UserEmail = _email });
         if (response == null)
         {
            //Aqui hubo un error
            _deslogear = true;
         }
         else if (String.IsNullOrEmpty(response.AccessToken))
         {
            //Aqui ya tiene activado el MFA
         }
         else
         {
            //Aquí NO tiene configurado el MFA
            //Aquí response deberia contener el qr (En formato Base64)
            _qrImagenBase64 = response.QrString;
            _secret = response.AccessToken;
         }
      }
   }
}